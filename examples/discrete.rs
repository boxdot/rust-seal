extern crate seal;

use seal::pair::strategy::discrete::Strategy;
use seal::pair::InMemoryAlignmentMatrix;
use seal::pair::Step;
use seal::pair::Strategy as StrategyTrait;
use seal::pair::{Alignment, AlignmentScope, AlignmentSet};

fn trace(x_seq: &Vec<char>, y_seq: &Vec<char>, alignment: &Alignment<isize>) {
    let mut x_vec: Vec<char> = vec![];
    let mut y_vec: Vec<char> = vec![];
    for step in alignment.steps() {
        match step {
            Step::Align { x, y } => {
                print!("=");
                x_vec.push(x_seq[x]);
                y_vec.push(y_seq[y]);
            }
            Step::Delete { x } => {
                print!(">");
                x_vec.push(x_seq[x]);
                y_vec.push('-');
            }
            Step::Insert { y } => {
                print!("<");
                x_vec.push('-');
                y_vec.push(y_seq[y]);
            }
        }
    }

    print!("\n");

    let x_str: String = x_vec.into_iter().collect();
    let y_str: String = y_vec.into_iter().collect();

    for (x, y) in x_str.chars().zip(y_str.chars()) {
        if x == y {
            print!("=");
        } else {
            print!("|");
        }
    }
    print!("\n");

    println!("{}", x_str);
    println!("{}", y_str);
}

fn align(label: &str, str_x: &str, str_y: &str, strategy: Strategy) {
    let sequence_x: Vec<char> = str_x.chars().collect();
    let sequence_y: Vec<char> = str_y.chars().collect();
    let alignment_set: Result<AlignmentSet<isize, InMemoryAlignmentMatrix<isize>>, _> =
        strategy.alignment_set(&sequence_x[..], &sequence_y[..]);

    match alignment_set {
        Ok(alignment_set) => {
            println!("{:?}", alignment_set.matrix());
            let alignment = alignment_set.alignment(AlignmentScope::Global);
            println!("Alignment: {:#?}", alignment);
            println!(
                "Alignment: {:?} (score: {}, origin: {:?})",
                label,
                alignment.score(),
                alignment.origin()
            );
            trace(&sequence_x, &sequence_y, &alignment);
            println!("\n--------------------------\n");
        }
        Err(error) => {
            println!("Failed to generate alignment set due to error:");
            println!("{:?}", error);
        }
    }
}

fn main() {
    /*
    let human = "MDEEENHYVSQLREVYSSCDTTGTGFLDRQELTQLCLKLHLEQQLPVLLQTLLGNDHFARVNFEEFKEGF\
                 VAVLSSNAGVRPSDEDSSSLESAASSAIPPKYVNGSKWYGRRSRPELCDAATEARRVPEQQTQASLKSHL\
                 WRSASLESVESPKSDEEAEStKEAQNELFEAQGQLQTWDSEDFGSPQKSCSPSFDTPESQIRGVWEELGV\
                 GSSGHLSEQELAVVCQSVGLQGLEKEELEDLFNKLDQDGDGKVSLEEFQLGLFSHEPALLLESSTRVKPS\
                 KAWSHYQVPEESGCHTTTTSSLVSLCSSLRLFSSIDDGSGFAFPDQVLAMWTQEGIQNGREILQSLDFSV\
                 DEKVNLLELTWALDNELMTVDSAVQQAALACYHQELSYQQGQVEQLARERDKARQDLERAEKRNLEFVKE\
                 MDDCHSTLEQLTEKKIKHLEQGYRERLSLLRSEVEAERELFWEQAHRQRAALEWDVGRLQAEEAGLREKL\
                 TLALkENSRLQKEIVEVVEKLSDSERLALKLQKDLEFVLKDKLEPQSAELLAQEERFAAVLKEYELKCRD\
                 LQDRNDELQAELEGLWARLPKNRHSPSWSPDGRRRQLPGLGPAGISFLGNSAPVSIETELMMEQVKEHYQ\
                 DLRTQLETKVNYYEREIAALKRNFEKERKDMEQARRREVSVLEGQKADLEELHEKSQEVIWGLQEQLQDT\
                 ARGPEPEQMGLAPCCTQALCGLALRHHSHLQQIRREAEAELSGELSGLGALPARRDLtLELEEPPQGPLP\
                 RGSQRSEQLELERALKLQPCASEKRAQMCVSLALEEEELELARGKRVDGPSLEAEMQALPKDGLVAGSGQ\
                 EGTRGLLPLRPGCGERPLAWLAPGDGRESEEAAGAGPRRRQAQDTEATQSPAPAPAPASHGPSERWSRMQ\
                 PCGVDGDIVPKEPEPFGASAAGLEQPGARELPLLGTERDASQTQPRMWEPPLRPAASCRGQAERLQAIQE\
                 ERARSWSRGTQEQASEQQARAEGALEPGCHKHSVEVARRGSLPSHLQLADPQGSWQEQLAAPEEGETKIA\
                 LEREKDDMETKLLHLEDVVRALEKHVDLRENDRLEFHRLSEENTLLKNDLGRVRQELEAAESTHDAQRKE\
                 IEVLKKDKEKACSEMEVLNRQNQNYKDQLSQLNVRVLQLGQEASTHQAQNEEHRVTIQMLTQSLEEVVRS\
                 GQQQSDQIQKLRVELECLNQEHQSLQLPWSELTQTLEESQDQVQGAHLRLRQAQAQHLQEVRLVPQDRVA\
                 ELHRLLSLQGEQARRRLDAQREEHEKQLKATEERVEEAEMILKNMEMLLQEKVDKLKEQFEKNTKSDLLL\
                 KELYVENAHLVRALQATEEKQRGAEKQSRLLEEKVRALNKLVSRIAPAALSV";
    */
    let mouse = "MDNEEENHYVSRLRDVYSSCDTTGTGFLDQEELTQLCTKLGLEEQLPALLHILLGDDRLARVNFEEFKEG\
                 FVAVLSSGSGVEPSDEEGSSSESATSCAVPPKYMSGSKWYGRRSLPELGDSATATKYGSEQQAKGSVKPP\
                 LRRSAsLEsVEsLKSDEDAESAKEPQNELFEAQGQLRSWGCEVFGTLRKSCSPSFSTPENLVQGIWHELG\
                 IGSSGHLNEQELAVVCRSIGLHSLEKQELEELFSKLDQDGDGRVSLAEFQLGLFGHEPPSLPASSSLIKP\
                 NRLWSHYQEESGCHTTTTSSLVSVCSGLRLFSSVDDGSGFAFPEQVISAWAQEGIQNGREILQSLDFSVD\
                 EKVNLLELTWALDNELLTVDGVIQQAALACYRQELSYHQGQVDQLVQERDKARQDLEKAEKRNLDFVREM\
                 DDCHSALEQLTEKKIKHLEQEYRGRLSLLRSEVEMERELFWEQARRQRAVLEQDVGRLQAEETSLREKLT\
                 LALKENSRLQKEIIEVVEKLSDSEKLVLRLQSDLQFVLKDKLEPQSMELLAQEEQFTAILNDYELKCRDL\
                 QDRNDELQAELEGLRLRLPRSRQSPAGTPGTHRRRIPGRGPADNLFVGESTPVSLETEIMVEQMKEHYQE\
                 LRMQLETKVNYYEKEIEVMKRNFEKDKKEMEQAFQLEVSVLEGQKADLEALYAKSQEVILGLKEQLQDAA\
                 QSPEPAPAGLAHCCAQALCTLAQRLEVEMHLRHQDQLLQIRQEAEEELNQKLSWLEAQHAACCESLSLQH\
                 QCEKDQLLQTHLQRVKDLAAQLDLEKGRREEREQEVLAHCRRQQLKLQAVMSEEQARICRSFTLEKEKLE\
                 QTYREQVEGLVQEADVLRALLKNGTTVVSDQQERTPSSMSLGPDSRQQPTARQAVSPDGRTGAPAEWPGP\
                 EKAEGRDFPGQLCSIDAMPSPTPTLLSRRSSENLGVRDNHQRPLNAEEGAIPKEPEPSARTLTGQGQKLP\
                 LPVHPQMLEPSLGTTALDRKAASVGVQGQASEGPVGDGEGVQEAWLQFRGEATRMRPSLPCSELPNPQEA\
                 TVMPAMSESEMKDVKIKLLQLEDVVRALEKADSRESYRAELQRLSEENLVLKSDLGKIQLELETSESKNE\
                 VQRQEIEVLKRDKEQACCDLEELSTQTQKYKDEMSQLNCRVLQLEGEPSGLHTQKEENHGAIQVLMKKLE\
                 EAGCREEQQGDQIQNLKIELERVNEECQYLRLSQAELTESLEESRSQLYSVQLRLEAAQSQHGRIVQRLQ\
                 EQMSQLVPGARVAELQHLLNVKEEEARRLSAQQEEYRQQLKAREDQVEDAEARLRNVEWLLQEKVEELRK\
                 QFEKNTRSDLLLKELYVENAHLMKAVQLTEEKQRGAEKKNCVLEEKVRALNKLISKMAPASLSV";
    let rat = "MDNEEENHYVSRLRDVYSSCDTTGTGFLDQEELTQLCTKLGLEEQLPALLHILL\
               GDGRLARVNFEEFKEGFVAVLSSATGVEPSDEEGSSSESATSCAVPPKYMSGSK\
               WYGRRSLPELGDSATTTKCGSEQQAKGSVKPPLRRSASLESVESLKSDEDAESP\
               KEPQNELFEAQGQLRSWGCEVFGTPRKSCSPSFNTPENQVQGIWHELGVGSSGH\
               LNEQELAVVCRSIGLHGLEKQELEELFSKLDRDGDGRVSLAEFQLGLFGHEPPS\
               LPASSSLIKPNGPWSHYQEESGCHTTTTSSLVSVCSGLRLFSSVDDGSGFAFPE\
               QVISAWAQEGIQNGREILQSLDFNVDEKVNLLELTWALDNELLTVDGVIQQAAL\
               ACYRQELNFHQGQVEQLVQERDKARQDLEKAEKRNLDFVREMDDCHSALEQLTE\
               KKIKHLEQEYRGRLSLLRSEVEMERELFWEQARRQRAVLEQDVGRLQAEETSLR\
               EKLTLALKENSRLQKEIIEVVEKLSDSEKLVLRLQSDLQFVLKDKLEPQSMELL\
               AQEEQFTAILNDYELKCRDLQDRNDELQAELEGLRVRLPRSRQSPSGTPGTHRR\
               WTPGRGPADNLFVGESIPVSLETEIKMQQMKENYQELRMQLETKVNYyEKEIEV\
               MKRNFEKDKKEMEQAFQLEVSVLEGQKADLETLYAKSQEVILGLKEQLQDAARS\
               PEPAPAGLAPCCAQALCTLAQRLGVEMHLRHQDQLLQIRREAEEELNQKLSWLE\
               AQHAACCESLSLQHQCEKDQLLQTHLQRVKDLAAQLDLEKGWREEREQEVLAHC\
               RRQQLKLQADEEEQARICRSFTLEKEKLEQTYREQVEGLVQEADVLRALLKNGT\
               TVVSDQQERIPGSMYPGPDSRQQPPTWQTVSPDGRTGAPAEWPGPGRADGRDLP\
               GQLCSLDAVPSPTPTLLSRRSSESLDVRDNHQGPLSAEEGAVPKEPEPSARTLT\
               GQDQKLPLPIQPQMLEPWLGPAAVDRKPDSVRVQGQASEGPTGDDkGVQETPLQ\
               LRGETARMRPSLPYSELPNPQEAKVMSVMSESEMNDVKTKLLQLEDVVRALEKA\
               DSRESYRAELQRLSEENSVLKSDLGKIQLELGTSESRNEVQRQEIEVLKRDKEQ\
               ACFDLEELSTQTQKYKDEMSQLNCRILQLEGDSSGLHTQKEENHAAIQVLMKKL\
               EEAECREKQQGDQIKHLKIELERVNEECQRLRLSQAELTGSLEESQGQLHSVQL\
               RLEAAQSQHDRIVQGLQEQMSQLVPGARVAELQHLLSLREEEAERLNAQQEEYK\
               QQLKAREDQVEEAEARLHNVEWLLQEKVEELRKQFEKNTRSDLLLKELYVENAH\
               LMKAVQLTEEKQRGAEKKNCVLEEKVRALNKLISKMAPASLSV";

    let seq_a = mouse;
    let seq_b = rat;

    // ABCDEFGHIJKLMNOPQRSTUVWXYZ
    let seq_a = "ABCD*FGHIJKLMNOPQRS*******";
    let seq_b = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    let seq_a = "ABEF";
    let seq_b = "ABCDEFG";

    println!("");

    let needleman_wunsch = Strategy::needleman_wunsch();

    align("Needleman-Wunsch", seq_a, seq_b, needleman_wunsch.clone());
    // align("Needleman-Wunsch", seq_b, seq_a, needleman_wunsch.clone());

    let smith_waterman = Strategy::smith_waterman();

    align("Smith-Waterman", seq_a, seq_b, smith_waterman.clone());
    // align("Smith-Waterman", seq_b, seq_a, smith_waterman.clone());

    println!("");
}
